// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for predefined values
enum CategoryType {
  FAST_FOOD
  FINE_DINING
  CASUAL
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}

enum PaymentMethod {
  CASH
  VISA
}

// Restaurant Model
model Restaurant {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  logo          String? // URL or path to logo image
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int
  description   String?
  review        String? // Could also be a separate Review model if reviews are complex
  rating        Float?   @default(0.0) // e.g., 4.5 out of 5
  address       String
  isOpen        Boolean  @default(false)
  minOrderPrice Float // Minimum price for an order
  deliveryTime  Int? // In minutes
  deliveryFee   Float? // Delivery fee
  workingHours  String // e.g., "09:00-22:00"
  menus         Menu[] // One-to-many relation with Menu
  orders        Order[] // One-to-many relation with Order
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Category Model
model Category {
  id          Int          @id @default(autoincrement())
  type        CategoryType @default(FAST_FOOD)
  restaurants Restaurant[] // One-to-many relation with Restaurant
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Menu Model
model Menu {
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  name         String // e.g., "Breakfast Menu", "Dinner Menu"
  dishes       Dish[] // One-to-many relation with Dish
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// Dish Model
model Dish {
  id          Int         @id @default(autoincrement())
  menu        Menu        @relation(fields: [menuId], references: [id])
  menuId      Int
  name        String
  description String?
  price       Float
  picture     String? // URL or path to dish image
  isDiscount  Boolean     @default(false)
  discount    Float? // Discount percentage or amount (optional)
  isFavourite Boolean     @default(false)
  isInCart    Boolean     @default(false)
  size        Size        @default(MEDIUM)
  extras      String[] // List of extras (e.g., ["Extra Cheese", "Bacon"])
  sauces      String[] // List of sauces (e.g., ["Ketchup", "BBQ"])
  orderItems  OrderItem[] // Many-to-many relation with Order through OrderItem
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Order Model
model Order {
  id            Int           @id @default(autoincrement())
  restaurant    Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId  Int
  userName      String // Name of the user placing the order
  userId        String? // Optional user ID for registered users
  items         OrderItem[] // Many-to-many relation with Dish through OrderItem
  totalAmount   Float // Total amount for the order
  paymentMethod PaymentMethod @default(CASH)
  address       Address       @relation(fields: [addressId], references: [id])
  addressId     Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Intermediate model for Order and Dish (many-to-many relationship)
model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  dish      Dish     @relation(fields: [dishId], references: [id])
  dishId    Int
  quantity  Int      @default(1) // Number of this dish in the order
  extras    String[] // Selected extras for this dish
  sauces    String[] // Selected sauces for this dish
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Address Model
model Address {
  id             Int      @id @default(autoincrement())
  userName       String
  phone          String
  site           String? // Optional website or reference
  city           String
  area           String
  floor          String?
  apt            String?
  buildingNumber String?
  address        String // Full address details
  title          String? // e.g., "Home", "Work"
  note           String? // Additional delivery notes
  orders         Order[] // One-to-many relation with Order
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
