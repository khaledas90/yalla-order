// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

 
enum CategoryType {
  FAST_FOOD
  FINE_DINING
  CASUAL
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}

enum PaymentMethod {
  CASH
  VISA
}
enum UserRole {
  USER
  ADMIN
}


// user Model
model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  image         String?
  phone         String?
  streetAddress String?
  postalCode    String?
  city          String?
  country       String?
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        OrderItem[]
  accounts      Account[]
  sessions      Session[]
}


// Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Verification model
model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
// account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}


// Restaurant Model
model Restaurant {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  logo          String? 
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int
  description   String?
  review        String?  
  rating        Float?   @default(0.0) 
  address       String
  isOpen        Boolean  @default(false)
  minOrderPrice Float  
  deliveryTime  Int? 
  deliveryFee   Float?  
  workingHours  String  
  menus         Menu[]  
  orders        Order[]  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Category Model
model Category {
  id          Int          @id @default(autoincrement())
  type        CategoryType @default(FAST_FOOD)
  restaurants Restaurant[]  
  order    Int       @default(autoincrement())
  products      Product[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Menu Model
model Menu {
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  name         String  
  dishes       Product[]  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// product Model
model Product {
  id          Int         @id @default(autoincrement())
  menu        Menu        @relation(fields: [menuId], references: [id])
  menuId      Int
  name        String
  description String?
  price       Float
  picture     String?  
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  isDiscount  Boolean     @default(false)
  discount    Float?  
  isFavourite Boolean     @default(false)
  isInCart    Boolean     @default(false)
  size        ProductSizes[]       
  extras      Extra[]
  sauces      String[]  
  orderItems  OrderItem[]  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ProductSizes  {
  id        String       @id @default(cuid())
  name      Size
  price     Float
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Extra {
   id        String           @id @default(cuid())
  name      String
  price     Float
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

// Order Model
model Order {
  id            Int           @id @default(autoincrement())
  restaurant    Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId  Int
  paid          Boolean      @default(false)
  userName      String  
  userId        String?  
  items         OrderItem[]  
  totalAmount   Float  
  paymentMethod PaymentMethod @default(CASH)
  address       Address       @relation(fields: [addressId], references: [id])
  addressId     Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}
 
model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product      Product  @relation(fields: [productId], references: [id])
  productId    Int
  quantity  Int      @default(1)  
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  extras    String[]  
  sauces    String[]  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Address Model
model Address {
  id             Int      @id @default(autoincrement())
  userName       String
  phone          String
  site           String?  
  city           String
  area           String
  floor          String?
  apt            String?
  buildingNumber String?
  address        String  
  title          String? 
  note           String?  
  orders         Order[]  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
